(function(w) {
	if (!w.Svc)
		w.Svc = {};
	var callback = function(resp, fnCallback, failure) {
		if (resp.successful) {
			fnCallback && fnCallback(resp.data);
		} else if(resp.code == 'member.noLogin'){
			layer.open({
			    content: '您当前还未登录，点击确定后重新登录！',
			    btn: '确定',
			    shadeClose: false,
			    yes: function(index){
  					location.href = rootPath + "/weixin/login.html?returnUrl="+encodeURIComponent(window.location.href);
  					layer.close(index);
				}
			 });
		} else if(resp.code == 'user.noLogin'){
			layer.open({
			    content: '您当前还未登录，点击确定后重新登录！',
			    btn: '确定',
			    shadeClose: false,
			    yes: function(index){
  					location.href = rootAdminPath + "/login";
  					layer.close(index);
				}
			 });
		} else {
			layer.open({
			    content: resp.msg,
			    shadeClose: false,
			    btn: '确定'
			 });
			failure && failure(resp.msg);
		}
	};

	/**
	 * jquery ajax方法封装
	 */
	var call = function(ajaxType, _url, _param, _success, method, refBy, async, failure, isShowTips) {

		var setting = {},currentLoadIndex;

		if (method)
			setting.type = method;
		else
			setting.type = 'POST';

		setting.url = _url;

		if (ajaxType == 'json') {
			setting.data = _param && JSON.stringify(_param);
			setting.contentType = 'application/json;charset=UTF-8';
			setting.dataType = 'json';
		} else if (ajaxType == 'form') {
			setting.contentType = 'application/x-www-form-urlencoded; charset=UTF-8';
			setting.data = _param;
			setting.traditional = true;// 采用传统方法序列号
		} else if (ajaxType == 'page') {
			setting.dataType = 'html';
		}

		setting.beforeSend = function(xhr) {
			if (refBy) {
				if ((typeof refBy) === 'string')
					xhr.setRequestHeader('functionReferBy', refBy);
				else
					xhr.setRequestHeader('functionReferBy', JSON
							.stringify(refBy));
			}
			// 判断是否需要显示遮罩，未传值或者true->显示，false和不正确参数->不显示
			if ((isShowTips == null) || (isShowTips == undefined) || (isShowTips === true)) {
				currentLoadIndex = layer.open({type: 2,shadeClose: false,content: '系统正在处理...'});
			}
		};

		setting.complete = function(XMLHttpRequest, textStatus) {
			// 判断是否需要显示遮罩，未传值或者true->显示，false和不正确参数->不显示
			if ((isShowTips == null) || (isShowTips == undefined) || (isShowTips === true)) {
				layer.close(currentLoadIndex);
			}
		};

		setting.error = function(xhr, textStatus, errorThrown) {
			// 判断是否需要显示遮罩，未传值或者true->显示，false和不正确参数->不显示
			if ((isShowTips == null) || (isShowTips == undefined) || (isShowTips === true)) {
				layer.close(currentLoadIndex);
			}
		};

		setting.success = function(msg) {
			// 判断是否需要显示遮罩，未传值或者true->显示，false和不正确参数->不显示
			if ((isShowTips == null) || (isShowTips == undefined) || (isShowTips === true)) {
				layer.close(currentLoadIndex);
			}

			if (ajaxType == 'page') {
				_success && _success(msg);
			} else
				callback(msg, _success, failure);
		};

		if (async != undefined) {
			setting.async = async;
		}

		setting.cache = false;

		$.ajax(setting);
	};
	
	/**
	 * json数据的ajax调用后台方法
	 * url: 访问的url
	 * param： 参数（json格式）
	 * callback： 回调函数
	 * 
	 */
	Svc.AjaxJson = function() {

		var _get = function(_url, _param, _success, refBy, async) {
			call('json', _url, _param, _success, 'GET', refBy, async);
		};

		var _post = function(_url, _param, _success, refBy, async) {
			call('json', _url, _param, _success, 'POST', refBy, async);
		};

		var _sGet = function(_url, _param, _success, refBy) {
			_get(_url, _param, _success, refBy, false);
		};

		var _sPost = function(_url, _param, _success, refBy) {
			_post(_url, _param, _success, refBy, false);
		};

		return {
			get : _get,
			post : _post,
			sGet : _sGet,
			sPost : _sPost
		};

	}();

	Svc.ajax = function(cfg) {
		var deconf = {
			method : 'POST',
			dataType : "json",
			asyn : true
		};
		$.extend(deconf, cfg);

		call(deconf.dataType, deconf.url, deconf.param, deconf.success,
				deconf.method.toUpperCase(), deconf.refBy, deconf.asyn,
				deconf.failure);
	};

	/**
	 * FORM表单数据的ajax提交
	 */
	Svc.AjaxForm = function() {

		var _get = function(_url, _param, _success, refBy, async) {
			call('form', _url, _param, _success, 'GET', refBy, async);
		};

		var _post = function(_url, _param, _success, refBy, async) {
			call('form', _url, _param, _success, 'POST', refBy, async);
		};

		var _sGet = function(_url, _param, _success, refBy) {
			_get(_url, _param, _success, refBy, false);
		};

		var _sPost = function(_url, _param, _success, refBy) {
			_post(_url, _param, _success, refBy, false);
		};
		/**
		 * 直接传入表单的form 的jquery对象来提交哦，例如 : send( $('#testForm'), callback)
		 */
		var _send = function(formObj, _success, refBy) {
			var p = formObj.serialize();
			var url = formObj.attr('action');
			var method = formObj.attr('method');
			call('form', url, p, _success, method, refBy);
		};

		return {
			get : _get,
			post : _post,
			send : _send,
			sGet : _sGet,
			sPost : _sPost
		};
	}();
	
	/**
	 * ajax获取后台页面
	 */
	Svc.AjaxPage = function(url, dom, params, type, callback){
		$.ajax({
			type: type||'GET',
			url: url,
			data: params||{},
			dataType: "html",
			async: true,
			cache: true,
			beforeSend: function() {
				dom.html('<h1 class="ajax-loading-animation"><i class="fa fa-cog fa-spin"></i> 加载中...</h1>');
		 	},
		  	success: function(data) {
		  		//dom.css({opacity: "0.0"}).html(data).delay(50).animate({opacity: "1.0"},300);
		  		dom.html(data);
		  		callback && callback();
		  	},
		  	error: function(XMLHttpRequest, textStatus, errorThrown) {
		  		dom.html('<h4 class="ajax-loading-error"><i class="fa fa-warning txt-color-orangeDark"></i> Error '+XMLHttpRequest.status+'! '+XMLHttpRequest.statusText+'.</h4>');
		  	}
		})
	};
	
	/**
	 * 表单数据转换为json
	 */
	Svc.formToJson = function(formObj, needKey) {
		var o = {};
		var a = formObj.serializeArray();
		$.each(a, function() {
			if (this.value || needKey) {
				if (o[this.name]) {
					if (!o[this.name].push) {
						o[this.name] = [ o[this.name] ];
					}
					o[this.name].push(this.value || null);
				} else {
					if ($("[name='" + this.name + "']:checkbox", formObj).length) {
						o[this.name] = [ this.value ];
					} else {
						o[this.name] = this.value || null;
					}
				}
			}
		});
		return o;
	};
	
	/**
	 * JSON数据绑定表单
	 */
	Svc.jsonToDom = function(data,container,expression,callbacks)
	{
		var dispose={//根据不同的类型做出相应处理
			INPUTradio:function(dom,val){
				dom.removeAttr("checked");
				if(dom.val()==val) dom.attr("checked","checked");
			},
			INPUTcheckbox:function(dom,vals){
				var array=[];
				if(Object.prototype.toString.apply(vals) === "[object Array]"){
					array=vals;
				}else{
					 array.push(vals);
				}
				for(var i in array)
				{
					if(dom.val()==array[i]) dom.attr("checked","checked");
				}
			},
			INPUThidden:function(dom,val){dom.val(val);},
			INPUTtext:function(dom,val){dom.val(val);},
			INPUTpassword:function(dom,val){dom.val(val);},
			TEXTAREAtextarea:function(dom,val){dom.val(val);},
			LABEL:function(dom,val){dom.text(val);},
			TEXTAREA:function(dom,val){dom.text(val);},
			SELECT:function(dom,val){dom.val(val);},
			"SELECTselect-one":function(dom,val){dom.val(val);},
			INPUTfile:function(){},
			FORM:function(){}//IE8，6  下会把FORM读出来;
		};
		
		if(!expression)
			expression='[name]';
		
		var doms=$(expression,container);
		if(data){
			$.each(doms,function(i){
				var dom=doms.eq(i);
				var domName=dom.attr('name');
					if(data[domName]==null)
						data[domName]="";
					var tagName=dom.get(0).tagName;
					
					var tagType=dom.attr("type");
					var type= tagType ? tagName+tagType:tagName;
					if(callbacks){//扩展处理的回调
						$.each(callbacks,function(i, callback){
							if(callback(dom,data[domName],type)==false)//有返回假就不不执行后面的处理
								return ;
						});
					}
					dispose[type](dom,data[domName]);
			});
		};
	};
	
	/**
	 * 重置表单
	 */
	Svc.resetForm = function(formObj){
		if(formObj){
			var resetInput = $("input[type='reset']",formObj);
			if(resetInput.length==0){//找不到dom对象时返回长度为0的数组
				resetInput = $("<input type='reset' style='display:none;'/>");
				formObj.append(resetInput);
			}
			resetInput.trigger('click');//执行浏览器默认表单重置行为
			
			$("textarea",formObj).empty();
			$("input[type='hidden']",formObj).val("");
		}
	};
	
	/**
	 * 查找URL后的参数
	 */
	Svc.queryString = function(name) {
		   var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)","i");
		   var r = window.location.search.substr(1).match(reg);
		   if (r!=null) return (r[2]); return null;
	}
	
	/**
	 * 设置-获取-移除Cookie
	 */
	Svc.cookie = {};
    //写入Cookie，key为键，value是值
    //duration过期时间（天为单位，默认1天）
	Svc.cookie.write = function (key, value, duration){
		Svc.cookie.remove(key);
        var d = new Date();
        if (duration <= 0)
            duration = 1;
        d.setTime(d.getTime() + 1000 * 60 * 60 * 24 * duration);
        document.cookie = key + "=" + encodeURI(value) + "; expires=" + d.toGMTString() + ";path=/";
    };
    //移除Cookie,key为键
    Svc.cookie.remove = function (key){
        var d = new Date();
        if (Svc.cookie.read(key) != ""){
            d.setTime(d.getTime() - (86400 * 1000 * 1));
            document.cookie = key + "=;expires=" + d.toGMTString() + ";path=/";
        }
    };
    //读取Cookie，key是键 	不存在返回空字符串""
    Svc.cookie.read = function (key){
        var arr = document.cookie.match(new RegExp("(^| )" + key + "=([^;]*)(;|$)"));
        if (arr != null)
            return decodeURIComponent(arr[2]);
        return "";
    };
	
})(window);

//对Date的扩展，将 Date 转化为指定格式的String
//月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，
//年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)
//例子：
//(new Date()).format("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423
//(new Date()).format("yyyy-M-d h:m:s.S") ==> 2006-7-2 8:9:4.18
Date.prototype.format = function(fmt) { // author: meizz
	var o = {
		"M+" : this.getMonth() + 1, // 月份
		"d+" : this.getDate(), // 日
		"H+" : this.getHours(), // 小时
		"m+" : this.getMinutes(), // 分
		"s+" : this.getSeconds(), // 秒
		"q+" : Math.floor((this.getMonth() + 3) / 3), // 季度
		"S" : this.getMilliseconds()
	// 毫秒
	};
	if (/(y+)/.test(fmt))
		fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "")
				.substr(4 - RegExp.$1.length));
	for ( var k in o)
		if (new RegExp("(" + k + ")").test(fmt))
			fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k])
					: (("00" + o[k]).substr(("" + o[k]).length)));
	return fmt;
};

String.prototype.trim = function() {
	return this.replace(/(^\s*)|(\s*$)/g, '');
};